// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inject-decorator positive - angular injects stories decorator as a window.__STORYBOOK_CLIENT_API__.addDecorator 1`] = `
"
var withStorySource = require('@storybook/addon-storysource').withStorySource;
window.__STORYBOOK_CLIENT_API__.addDecorator(withStorySource(\\"import { Component } from '@angular/core';\\\\nimport { storiesOf } from '@storybook/angular';\\\\n\\\\n@Component({\\\\n  selector: 'storybook-with-ng-content',\\\\n  template: \`<div style=\\\\\\"color: #1e88e5;\\\\\\"><ng-content></ng-content></div>\`,\\\\n})\\\\nclass WithNgContentComponent {}\\\\n\\\\nstoriesOf('Custom|ng-content', module).add('Default', () => ({\\\\n  template: \`<storybook-with-ng-content><h1>This is rendered in ng-content</h1></storybook-with-ng-content>\`,\\\\n  moduleMetadata: {\\\\n    declarations: [WithNgContentComponent],\\\\n  },\\\\n}));\\\\n\\", {\\"Custom|ng-content@Default\\":{\\"startLoc\\":{\\"col\\":43,\\"line\\":10},\\"endLoc\\":{\\"col\\":2,\\"line\\":15}}}));

import { Component } from '@angular/core';
import { storiesOf } from '@storybook/angular';

@Component({
  selector: 'storybook-with-ng-content',
  template: \`<div style=\\"color: #1e88e5;\\"><ng-content></ng-content></div>\`,
})
class WithNgContentComponent {}

storiesOf('Custom|ng-content', module).add('Default', () => ({
  template: \`<storybook-with-ng-content><h1>This is rendered in ng-content</h1></storybook-with-ng-content>\`,
  moduleMetadata: {
    declarations: [WithNgContentComponent],
  },
}));
"
`;

exports[`inject-decorator positive - ts injects stories decorator as a window.__STORYBOOK_CLIENT_API__.addDecorator 1`] = `
"
var withStorySource = require('@storybook/addon-storysource').withStorySource;
window.__STORYBOOK_CLIENT_API__.addDecorator(withStorySource(\\"import { Component } from '@angular/core';\\\\nimport { Store, StoreModule } from '@ngrx/store';\\\\nimport { storiesOf, moduleMetadata } from '@storybook/angular';\\\\n\\\\n@Component({\\\\n  selector: 'storybook-comp-with-store',\\\\n  template: '<div>{{this.getSotreState()}}</div>',\\\\n})\\\\nclass WithStoreComponent {\\\\n  private store: Store<any>;\\\\n\\\\n  constructor(store: Store<any>) {\\\\n    this.store = store;\\\\n  }\\\\n\\\\n  getSotreState(): string {\\\\n    return this.store === undefined ? 'Store is NOT injected' : 'Store is injected';\\\\n  }\\\\n}\\\\n\\\\nstoriesOf('ngrx|Store', module)\\\\n  .addDecorator(\\\\n    moduleMetadata({\\\\n      imports: [StoreModule.forRoot({})],\\\\n      declarations: [WithStoreComponent],\\\\n    })\\\\n  )\\\\n  .add('With component', () => {\\\\n    return {\\\\n      component: WithStoreComponent,\\\\n    };\\\\n  });\\\\n\\", {\\"ngrx|Store@With component\\":{\\"startLoc\\":{\\"col\\":7,\\"line\\":28},\\"endLoc\\":{\\"col\\":3,\\"line\\":32}}}));

import { Component } from '@angular/core';
import { Store, StoreModule } from '@ngrx/store';
import { storiesOf, moduleMetadata } from '@storybook/angular';

@Component({
  selector: 'storybook-comp-with-store',
  template: '<div>{{this.getSotreState()}}</div>',
})
class WithStoreComponent {
  private store: Store<any>;

  constructor(store: Store<any>) {
    this.store = store;
  }

  getSotreState(): string {
    return this.store === undefined ? 'Store is NOT injected' : 'Store is injected';
  }
}

storiesOf('ngrx|Store', module)
  .addDecorator(
    moduleMetadata({
      imports: [StoreModule.forRoot({})],
      declarations: [WithStoreComponent],
    })
  )
  .add('With component', () => {
    return {
      component: WithStoreComponent,
    };
  });"
`;

exports[`inject-decorator positive injects stories decorator as a window.__STORYBOOK_CLIENT_API__.addDecorator 1`] = `
"
var withStorySource = require('@storybook/addon-storysource').withStorySource;
window.__STORYBOOK_CLIENT_API__.addDecorator(withStorySource(\\"import React from 'react';\\\\nimport { storiesOf } from '@storybook/react';\\\\nimport { withInfo } from '@storybook/addon-info';\\\\nimport { action } from '@storybook/addon-actions';\\\\n\\\\nimport DocgenButton from '../components/DocgenButton';\\\\nimport FlowTypeButton from '../components/FlowTypeButton';\\\\nimport BaseButton from '../components/BaseButton';\\\\nimport TableComponent from '../components/TableComponent';\\\\n\\\\nstoriesOf('Addons|Info.React Docgen', module)\\\\n  .add(\\\\n    'Comments from PropType declarations',\\\\n    withInfo(\\\\n      'Comments above the PropType declarations should be extracted from the React component file itself and rendered in the Info Addon prop table'\\\\n    )(() => <DocgenButton onClick={action('clicked')} label=\\\\\\"Docgen Button\\\\\\" />)\\\\n  )\\\\n  .add(\\\\n    'Comments from Flow declarations',\\\\n    withInfo(\\\\n      'Comments above the Flow declarations should be extracted from the React component file itself and rendered in the Info Addon prop table'\\\\n    )(() => <FlowTypeButton onClick={action('clicked')} label=\\\\\\"Flow Typed Button\\\\\\" />)\\\\n  )\\\\n  .add(\\\\n    'Comments from component declaration',\\\\n    withInfo(\\\\n      'Comments above the component declaration should be extracted from the React component file itself and rendered below the Info Addon heading'\\\\n    )(() => <BaseButton onClick={action('clicked')} label=\\\\\\"Button\\\\\\" />)\\\\n  );\\\\n\\\\nconst markdownDescription = \`\\\\n#### You can use markdown in your withInfo() description.\\\\n\\\\nSometimes you might want to manually include some code examples:\\\\n~~~js\\\\nconst Button = () => <button />;\\\\n~~~\\\\n\\\\nMaybe include a [link](http://storybook.js.org) to your project as well.\\\\n\`;\\\\n\\\\nstoriesOf('Addons|Info.Markdown', module).add(\\\\n  'Displays Markdown in description',\\\\n  withInfo(markdownDescription)(() => <BaseButton onClick={action('clicked')} label=\\\\\\"Button\\\\\\" />)\\\\n);\\\\n\\\\nstoriesOf('Addons|Info.Options.inline', module).add(\\\\n  'Inlines component inside story',\\\\n  withInfo({\\\\n    text: 'Component should be inlined between description and PropType table',\\\\n    inline: true, // Displays info inline vs click button to view\\\\n  })(() => <BaseButton label=\\\\\\"Button\\\\\\" />)\\\\n);\\\\n\\\\nstoriesOf('Addons|Info.Options.header', module).add(\\\\n  'Shows or hides Info Addon header',\\\\n  withInfo({\\\\n    text: 'The Info Addon header should be hidden',\\\\n    header: false, // Toggles display of header with component name and description\\\\n  })(() => <BaseButton label=\\\\\\"Button\\\\\\" />)\\\\n);\\\\n\\\\nstoriesOf('Addons|Info.Options.source', module).add(\\\\n  'Shows or hides Info Addon source',\\\\n  withInfo({\\\\n    text: 'The Info Addon source section should be hidden',\\\\n    source: false, // Displays the source of story Component\\\\n  })(() => <BaseButton label=\\\\\\"Button\\\\\\" />)\\\\n);\\\\n\\\\nstoriesOf('Addons|Info.Options.propTables', module).add(\\\\n  'Shows additional component prop tables',\\\\n  withInfo({\\\\n    text: 'There should be a prop table added for a component not included in the story',\\\\n    propTables: [FlowTypeButton],\\\\n  })(() => <BaseButton label=\\\\\\"Button\\\\\\" />)\\\\n);\\\\n\\\\nstoriesOf('Addons|Info.Options.propTablesExclude', module).add(\\\\n  'Exclude component from prop tables',\\\\n  withInfo({\\\\n    text: 'This can exclude extraneous components from being displayed in prop tables.',\\\\n    propTablesExclude: [FlowTypeButton],\\\\n  })(() => (\\\\n    <div>\\\\n      <BaseButton label=\\\\\\"Button\\\\\\" />\\\\n      <FlowTypeButton label=\\\\\\"Flow Typed Button\\\\\\" />\\\\n    </div>\\\\n  ))\\\\n);\\\\n\\\\nstoriesOf('Addons|Info.Options.styles', module)\\\\n  .add(\\\\n    'Extend info styles with an object',\\\\n    withInfo({\\\\n      styles: {\\\\n        button: {\\\\n          base: {\\\\n            background: 'purple',\\\\n          },\\\\n        },\\\\n        header: {\\\\n          h1: {\\\\n            color: 'green',\\\\n          },\\\\n        },\\\\n      },\\\\n    })(() => <BaseButton label=\\\\\\"Button\\\\\\" />)\\\\n  )\\\\n  .add(\\\\n    'Full control over styles using a function',\\\\n    withInfo({\\\\n      styles: stylesheet => ({\\\\n        ...stylesheet,\\\\n        header: {\\\\n          ...stylesheet.header,\\\\n          h1: {\\\\n            ...stylesheet.header.h1,\\\\n            color: 'red',\\\\n          },\\\\n        },\\\\n      }),\\\\n    })(() => <BaseButton label=\\\\\\"Button\\\\\\" />)\\\\n  );\\\\n\\\\nstoriesOf('Addons|Info.Options.TableComponent', module).add(\\\\n  'Use a custom component for the table',\\\\n  withInfo({\\\\n    TableComponent,\\\\n  })(() => <BaseButton label=\\\\\\"Button\\\\\\" />)\\\\n);\\\\n\\\\nstoriesOf('Addons|Info.Decorator', module)\\\\n  .addDecorator((story, context) =>\\\\n    withInfo('Info could be used as a global or local decorator as well.')(story)(context)\\\\n  )\\\\n  .add('Use Info as story decorator', () => <BaseButton label=\\\\\\"Button\\\\\\" />);\\\\n\\\\nconst hoc = WrapComponent => ({ ...props }) => <WrapComponent {...props} />;\\\\n\\\\nconst Input = hoc(() => <input type=\\\\\\"text\\\\\\" />);\\\\n\\\\nconst TextArea = hoc(({ children }) => <textarea>{children}</textarea>);\\\\n\\\\nstoriesOf('Addons|Info.GitHub issues', module).add(\\\\n  '#1814',\\\\n  withInfo('Allow Duplicate DisplayNames for HOC #1814')(() => (\\\\n    <div>\\\\n      <Input />\\\\n      <TextArea />\\\\n    </div>\\\\n  ))\\\\n);\\\\n\\", {\\"Addons|Info.React Docgen@Comments from component declaration\\":{\\"startLoc\\":{\\"col\\":4,\\"line\\":25},\\"endLoc\\":{\\"col\\":70,\\"line\\":28}},\\"Addons|Info.React Docgen@Comments from Flow declarations\\":{\\"startLoc\\":{\\"col\\":4,\\"line\\":19},\\"endLoc\\":{\\"col\\":85,\\"line\\":22}},\\"Addons|Info.React Docgen@Comments from PropType declarations\\":{\\"startLoc\\":{\\"col\\":4,\\"line\\":13},\\"endLoc\\":{\\"col\\":79,\\"line\\":16}},\\"Addons|Info.Markdown@Displays Markdown in description\\":{\\"startLoc\\":{\\"col\\":2,\\"line\\":43},\\"endLoc\\":{\\"col\\":96,\\"line\\":44}},\\"Addons|Info.Options.inline@Inlines component inside story\\":{\\"startLoc\\":{\\"col\\":2,\\"line\\":48},\\"endLoc\\":{\\"col\\":41,\\"line\\":52}},\\"Addons|Info.Options.header@Shows or hides Info Addon header\\":{\\"startLoc\\":{\\"col\\":2,\\"line\\":56},\\"endLoc\\":{\\"col\\":41,\\"line\\":60}},\\"Addons|Info.Options.source@Shows or hides Info Addon source\\":{\\"startLoc\\":{\\"col\\":2,\\"line\\":64},\\"endLoc\\":{\\"col\\":41,\\"line\\":68}},\\"Addons|Info.Options.propTables@Shows additional component prop tables\\":{\\"startLoc\\":{\\"col\\":2,\\"line\\":72},\\"endLoc\\":{\\"col\\":41,\\"line\\":76}},\\"Addons|Info.Options.propTablesExclude@Exclude component from prop tables\\":{\\"startLoc\\":{\\"col\\":2,\\"line\\":80},\\"endLoc\\":{\\"col\\":4,\\"line\\":89}},\\"Addons|Info.Options.styles@Full control over styles using a function\\":{\\"startLoc\\":{\\"col\\":4,\\"line\\":111},\\"endLoc\\":{\\"col\\":43,\\"line\\":123}},\\"Addons|Info.Options.styles@Extend info styles with an object\\":{\\"startLoc\\":{\\"col\\":4,\\"line\\":94},\\"endLoc\\":{\\"col\\":43,\\"line\\":108}},\\"Addons|Info.Options.TableComponent@Use a custom component for the table\\":{\\"startLoc\\":{\\"col\\":2,\\"line\\":127},\\"endLoc\\":{\\"col\\":41,\\"line\\":130}},\\"Addons|Info.Decorator@Use Info as story decorator\\":{\\"startLoc\\":{\\"col\\":7,\\"line\\":137},\\"endLoc\\":{\\"col\\":73,\\"line\\":137}},\\"Addons|Info.GitHub issues@#1814\\":{\\"startLoc\\":{\\"col\\":2,\\"line\\":146},\\"endLoc\\":{\\"col\\":4,\\"line\\":152}}}));

import React from 'react';
import { storiesOf } from '@storybook/react';
import { withInfo } from '@storybook/addon-info';
import { action } from '@storybook/addon-actions';

import DocgenButton from '../components/DocgenButton';
import FlowTypeButton from '../components/FlowTypeButton';
import BaseButton from '../components/BaseButton';
import TableComponent from '../components/TableComponent';

storiesOf('Addons|Info.React Docgen', module)
  .add(
    'Comments from PropType declarations',
    withInfo(
      'Comments above the PropType declarations should be extracted from the React component file itself and rendered in the Info Addon prop table'
    )(() => <DocgenButton onClick={action('clicked')} label=\\"Docgen Button\\" />)
  )
  .add(
    'Comments from Flow declarations',
    withInfo(
      'Comments above the Flow declarations should be extracted from the React component file itself and rendered in the Info Addon prop table'
    )(() => <FlowTypeButton onClick={action('clicked')} label=\\"Flow Typed Button\\" />)
  )
  .add(
    'Comments from component declaration',
    withInfo(
      'Comments above the component declaration should be extracted from the React component file itself and rendered below the Info Addon heading'
    )(() => <BaseButton onClick={action('clicked')} label=\\"Button\\" />)
  );

const markdownDescription = \`
#### You can use markdown in your withInfo() description.

Sometimes you might want to manually include some code examples:
~~~js
const Button = () => <button />;
~~~

Maybe include a [link](http://storybook.js.org) to your project as well.
\`;

storiesOf('Addons|Info.Markdown', module).add(
  'Displays Markdown in description',
  withInfo(markdownDescription)(() => <BaseButton onClick={action('clicked')} label=\\"Button\\" />)
);

storiesOf('Addons|Info.Options.inline', module).add(
  'Inlines component inside story',
  withInfo({
    text: 'Component should be inlined between description and PropType table',
    inline: true, // Displays info inline vs click button to view
  })(() => <BaseButton label=\\"Button\\" />)
);

storiesOf('Addons|Info.Options.header', module).add(
  'Shows or hides Info Addon header',
  withInfo({
    text: 'The Info Addon header should be hidden',
    header: false, // Toggles display of header with component name and description
  })(() => <BaseButton label=\\"Button\\" />)
);

storiesOf('Addons|Info.Options.source', module).add(
  'Shows or hides Info Addon source',
  withInfo({
    text: 'The Info Addon source section should be hidden',
    source: false, // Displays the source of story Component
  })(() => <BaseButton label=\\"Button\\" />)
);

storiesOf('Addons|Info.Options.propTables', module).add(
  'Shows additional component prop tables',
  withInfo({
    text: 'There should be a prop table added for a component not included in the story',
    propTables: [FlowTypeButton],
  })(() => <BaseButton label=\\"Button\\" />)
);

storiesOf('Addons|Info.Options.propTablesExclude', module).add(
  'Exclude component from prop tables',
  withInfo({
    text: 'This can exclude extraneous components from being displayed in prop tables.',
    propTablesExclude: [FlowTypeButton],
  })(() => (
    <div>
      <BaseButton label=\\"Button\\" />
      <FlowTypeButton label=\\"Flow Typed Button\\" />
    </div>
  ))
);

storiesOf('Addons|Info.Options.styles', module)
  .add(
    'Extend info styles with an object',
    withInfo({
      styles: {
        button: {
          base: {
            background: 'purple',
          },
        },
        header: {
          h1: {
            color: 'green',
          },
        },
      },
    })(() => <BaseButton label=\\"Button\\" />)
  )
  .add(
    'Full control over styles using a function',
    withInfo({
      styles: stylesheet => ({
        ...stylesheet,
        header: {
          ...stylesheet.header,
          h1: {
            ...stylesheet.header.h1,
            color: 'red',
          },
        },
      }),
    })(() => <BaseButton label=\\"Button\\" />)
  );

storiesOf('Addons|Info.Options.TableComponent', module).add(
  'Use a custom component for the table',
  withInfo({
    TableComponent,
  })(() => <BaseButton label=\\"Button\\" />)
);

storiesOf('Addons|Info.Decorator', module)
  .addDecorator((story, context) =>
    withInfo('Info could be used as a global or local decorator as well.')(story)(context)
  )
  .add('Use Info as story decorator', () => <BaseButton label=\\"Button\\" />);

const hoc = WrapComponent => ({ ...props }) => <WrapComponent {...props} />;

const Input = hoc(() => <input type=\\"text\\" />);

const TextArea = hoc(({ children }) => <textarea>{children}</textarea>);

storiesOf('Addons|Info.GitHub issues', module).add(
  '#1814',
  withInfo('Allow Duplicate DisplayNames for HOC #1814')(() => (
    <div>
      <Input />
      <TextArea />
    </div>
  ))
);
"
`;
